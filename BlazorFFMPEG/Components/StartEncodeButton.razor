@inject FfmpegCodecService FfmpegCodecService
@using BlazorFFMPEG.Data
@using BlazorFFMPEG.Shared
@using BlazorFFMPEG.Shared.DTO
@using System.Net.WebSockets
@using System.Runtime.CompilerServices
@using System.Text
@using Newtonsoft.Json
@using System.Diagnostics
@using System.Reflection.Metadata
@using System;
@using System.Threading;
@using Websocket.Client;
@using Newtonsoft.Json;

<div class="">
    <button class="btn btn-primary" @onclick="startEncode">Start Encode</button>
</div>


@code {
	[Parameter]
	public AddEncodeJobModel addEncodeJobModel { get; set; }

	[Parameter]
	public EventCallback<AddEncodeJobModel> addEncodeJobModelChanged { get; set; }
    
    
    private async Task startEncode()
    {
	    string? encode = await FfmpegCodecService.startEncode(this.addEncodeJobModel);
	    
	    await ToastControllerComponent.getInstance().ShowCustomToast(encode);
    }
	
	public async Task HandleMessages(ClientWebSocket ws) {
		try {
			using (var ms = new MemoryStream()) {
				while (ws.State == WebSocketState.Open) {
					WebSocketReceiveResult result;
					do {
						var messageBuffer = WebSocket.CreateClientBuffer(1024, 16);
						result = await ws.ReceiveAsync(messageBuffer, CancellationToken.None);
						ms.Write(messageBuffer.Array, messageBuffer.Offset, result.Count);
					}
					while (!result.EndOfMessage);

					if (result.MessageType == WebSocketMessageType.Text) {
						var msgString = Encoding.UTF8.GetString(ms.ToArray());
						var message = JsonConvert.DeserializeObject<Dictionary<String, String>>(msgString);
						
						Console.WriteLine(message);
					}
					ms.Seek(0, SeekOrigin.Begin);
					ms.Position = 0;
				}
			}
		} catch (InvalidOperationException) {
			Console.WriteLine("ERROR");
		}
	}
}
@inject FfmpegCodecService FfmpegCodecService
@using BlazorFFMPEG.Data
@using BlazorFFMPEG.Shared
@using BlazorFFMPEG.Shared.DTO

<link href="css/Components/DropDown.css" rel="stylesheet">

<div class="btn-group dropDown">
    <button class="btn btn-secondary dropdown-toggle @(testMethod())" type="button" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-expanded="false">
        <span>Codec: @this.addEncodeJobModel.encoder?.name</span>
    </button>
    <ul class="dropdown-menu gap-1 p-2 rounded-3 mx-0 shadow w-220px overflow-auto" style="">
        
        @foreach (var availableCodec in availableCodecs)
        {
            <li>
                <a class="dropdown-item rounded-2" onclick="@(() => onCodecSelect(availableCodec))">
                    @availableCodec.name
                    <div class="codecfavorite">
                        <span class="oi oi-star" aria-hidden="true"></span>
                    </div>
                </a>
            </li>
        }
    </ul>
</div>

@code {
    private List<Encoder> availableCodecs = new List<Encoder>();

    [Parameter]
    public AddEncodeJobModel addEncodeJobModel { get; set; }

    [Parameter]
    public EventCallback<AddEncodeJobModel> addEncodeJobModelChanged { get; set; }


    protected override async Task OnInitializedAsync()
    {
        availableCodecs = await FfmpegCodecService.getAvailableCodecs_WithCustomSort();
    }

    private void onCodecSelect(Encoder selectedCodec)
    {
        this.addEncodeJobModel.setEncoder(selectedCodec);

        this.addEncodeJobModelChanged.InvokeAsync(this.addEncodeJobModel);
        
        StateHasChanged();
    }
    private string testMethod()
    {
        return (this.addEncodeJobModel.encoder == null) ? "dropDown-toggle-empty" : "dropDown-toggle-selected";
    }
}
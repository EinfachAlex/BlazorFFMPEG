@inject FfmpegCodecService FfmpegCodecService
@using BlazorFFMPEG.Data
@using BlazorFFMPEG.Shared
@using BlazorFFMPEG.Shared.Constants
@using BlazorFFMPEG.Shared.DTO

<link href="css/Components/Slider.css" rel="stylesheet">

<div>

    @if (this.addEncodeJobModel.selectedQualityMethod?.name == EQualityMethods.Bitrate.ToString())
    {
        <input type="range" class="form-range slider" min="0" max="100000" step="500" id="bitrateRange" value="@this.addEncodeJobModel.qualityValue" @oninput="@((args) => onQualityValueChange(args))">

    }
    else if (this.addEncodeJobModel.selectedQualityMethod?.name == EQualityMethods.CQ.ToString())
    {
        <input type="range" class="form-range slider" min="0" max="63" step="1" id="cqRange" value="@this.addEncodeJobModel.qualityValue" @oninput="@((args) => onQualityValueChange(args))">
    }
    else
    {
        <input type="range" class="form-range slider" disabled>
    }
    
    <br/>
    <br/>
    <span class="slider-text">@this.addEncodeJobModel.qualityValue</span>

</div>

@code {
    private List<Encoder> availableCodecs = new List<Encoder>();

    [Parameter]
    public AddEncodeJobModel addEncodeJobModel { get; set; }

    [Parameter]
    public EventCallback<AddEncodeJobModel> addEncodeJobModelChanged { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        availableCodecs = await FfmpegCodecService.getAvailableCodecs_WithCustomSort();

        this.addEncodeJobModel.setQualityValue(15);
    }

    private void onQualityValueChange(ChangeEventArgs args)
    {
        this.addEncodeJobModel.setQualityValue(Convert.ToInt32(args.Value));
    }
}